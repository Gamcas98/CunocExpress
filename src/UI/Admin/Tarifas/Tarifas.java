/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ui.Admin.Tarifas;

import SQL.ActualizarDatos;
import SQL.ObtenerDatos;
import java.sql.Date;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 *
 * @author Gamcas
 */
public class Tarifas extends javax.swing.JDialog {

    private LocalDate hoy = LocalDate.now();
    private Date date = Date.valueOf(hoy);

    /**
     * Creates new form TarifaOperacion
     */
    public Tarifas(java.awt.Frame parent, boolean modal, int pantalla) {
        super(parent, modal);
        initComponents();
        this.setSize(700, 400);
        this.setLocationRelativeTo(null);
        cambiar(pantalla);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTitulo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTarifaActual = new javax.swing.JTextField();
        txtNueva = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAsignar = new javax.swing.JButton();
        error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        txtTitulo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        txtTitulo.setText("titulo chido");
        getContentPane().add(txtTitulo);
        txtTitulo.setBounds(180, 10, 330, 70);

        jLabel2.setText("Tarifa Acutal");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(130, 100, 90, 30);

        txtTarifaActual.setEnabled(false);
        getContentPane().add(txtTarifaActual);
        txtTarifaActual.setBounds(80, 130, 190, 40);
        getContentPane().add(txtNueva);
        txtNueva.setBounds(400, 130, 190, 40);

        jLabel3.setText("Nueva Tarifa");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(450, 100, 90, 30);

        btnAsignar.setText("boton mamalom");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAsignar);
        btnAsignar.setBounds(230, 250, 220, 70);

        error.setBackground(new java.awt.Color(255, 0, 51));
        error.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(error);
        error.setBounds(230, 190, 200, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed

        try {

            if (btnAsignar.getText().equals("Asignar Tarifa de Operacion")) {

                if (txtNueva.getText().isEmpty()) {
                    error.setText("Ingrese una tarifa");
                } else {
                    if (txtNueva.getText().equals("0")) {
                        error.setText("La tarifa no puede ser 0");
                    } else {
                        if (ActualizarDatos.setTarifaOperacion(Double.parseDouble(txtNueva.getText()), date)) {
                            JOptionPane.showMessageDialog(null, "Tarifa Asignada con exito");
                            txtNueva.setText("");
                            error.setText("");
                            mostrarTarifaOperacion();
                        }
                    }
                }

            } else if (btnAsignar.getText().equals("Asignar Tarifa por Libra")) {

                try {
                    if (txtNueva.getText().isEmpty()) {
                        error.setText("Ingrese una tarifa");
                    } else {
                        if (txtNueva.getText().equals("0")) {
                            error.setText("La tarifa no puede ser 0");
                        } else {

                            if (ActualizarDatos.setTarifasPaquetes(Double.parseDouble(ObtenerDatos.obtenerTarifaPrioridad()),
                                    Double.parseDouble(txtNueva.getText()), date)) {

                                JOptionPane.showMessageDialog(null, "Tarifa Asignada con exito");
                                txtNueva.setText("");
                                error.setText("");
                                mostrarPrecioLibra();
                            }
                        }
                    }
                } catch (NullPointerException e) {
                    if (ActualizarDatos.setTarifasPaquetes(null,
                            Double.parseDouble(txtNueva.getText()), date)) {

                        JOptionPane.showMessageDialog(null, "Tarifa Asignada con exito");
                        txtNueva.setText("");
                        error.setText("");
                        mostrarPrecioLibra();

                    }
                }

            } else {

                try {
                    if (txtNueva.getText().isEmpty()) {
                        error.setText("Ingrese una tarifa");
                    } else {
                        if (txtNueva.getText().equals("0")) {
                            error.setText("La tarifa no puede ser 0");
                        } else {

                            if (ActualizarDatos.setTarifasPaquetes(Double.parseDouble(txtNueva.getText()),
                                    Double.parseDouble(ObtenerDatos.obtenerTarifaLibra()), date)) {

                                JOptionPane.showMessageDialog(null, "Tarifa Asignada con exito");
                                txtNueva.setText("");
                                error.setText("");
                                mostrarTarifaPrioridad();
                            }
                        }
                    }

                } catch (NullPointerException e) {

                    if (ActualizarDatos.setTarifasPaquetes(Double.parseDouble(txtNueva.getText()),
                            null, date)) {

                        JOptionPane.showMessageDialog(null, "Tarifa Asignada con exito");
                        txtNueva.setText("");
                        error.setText("");
                        mostrarTarifaPrioridad();
                    }
                }
            }

        } catch (NumberFormatException e) {
            error.setText("La tarifa debe ser un numero");
        }
    }//GEN-LAST:event_btnAsignarActionPerformed

    private void cambiar(int pantalla) {

        if (pantalla == 1) {
            this.setTitle("Tarifa Operacion");
            txtTitulo.setText("Asignar Tarifa de Operacion Global");
            btnAsignar.setText("Asignar Tarifa de Operacion");
            mostrarTarifaOperacion();
        } else if (pantalla == 2) {
            this.setTitle("Tarifa por Libra");
            txtTitulo.setText("Asignar Tarifa por Libra");
            btnAsignar.setText("Asignar Tarifa por Libra");
            mostrarPrecioLibra();
        } else {
            this.setTitle("Tarifa de Prioridad");
            txtTitulo.setText("Asignar Tarifa de Prioridad");
            btnAsignar.setText("Asignar Tarifa de Prioridad");
            mostrarTarifaPrioridad();
        }
    }

    private void mostrarTarifaPrioridad() {
        if (!(ObtenerDatos.obtenerTarifaPrioridad() == null)) {
            txtTarifaActual.setText(ObtenerDatos.obtenerTarifaPrioridad());
        } else {
            this.txtTarifaActual.setText("No hay una tarifa aun");
        }
    }

    private void mostrarPrecioLibra() {
        if (!(ObtenerDatos.obtenerTarifaLibra() == null)) {
            txtTarifaActual.setText(ObtenerDatos.obtenerTarifaLibra());
        } else {
            this.txtTarifaActual.setText("No hay una tarifa aun");
        }
    }

    private void mostrarTarifaOperacion() {
        if (!(ObtenerDatos.obtonerTarifaOperacion() == null)) {
            txtTarifaActual.setText(ObtenerDatos.obtonerTarifaOperacion());
        } else {
            this.txtTarifaActual.setText("No hay una tarifa aun");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JLabel error;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtNueva;
    private javax.swing.JTextField txtTarifaActual;
    private javax.swing.JLabel txtTitulo;
    // End of variables declaration//GEN-END:variables
}
